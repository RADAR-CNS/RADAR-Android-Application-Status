/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.application;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Timestamp from an external source. */
@org.apache.avro.specific.AvroGenerated
public class ApplicationExternalTime extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1680300150837476375L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ApplicationExternalTime\",\"namespace\":\"org.radarcns.application\",\"doc\":\"Timestamp from an external source.\",\"fields\":[{\"name\":\"time\",\"type\":\"double\",\"doc\":\"device timestamp in UTC (s)\"},{\"name\":\"timeReceived\",\"type\":\"double\",\"doc\":\"device receiver timestamp in UTC (s)\"},{\"name\":\"externalTime\",\"type\":\"double\",\"doc\":\"timestamp in UTC according to an external source (s)\",\"default\":\"NaN\"},{\"name\":\"host\",\"type\":[\"null\",\"string\"],\"doc\":\"hostname or IP address that time was polled from\",\"default\":null},{\"name\":\"protocol\",\"type\":{\"type\":\"enum\",\"name\":\"ExternalTimeProtocol\",\"doc\":\"SNTP (Simple Network Time Protocol) synchronizes with a single server once, NTP (Network Time Protocol) may synchronize with multiple servers and derive some continuous measures.\",\"symbols\":[\"SNTP\",\"NTP\"]},\"doc\":\"protocol for external time synchronization\",\"default\":\"SNTP\"},{\"name\":\"delay\",\"type\":\"double\",\"doc\":\"delay between sending and receiving a message from the host (s). The lower this delay, the more precise the external timestamp is expected to be.\",\"default\":\"NaN\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** device timestamp in UTC (s) */
  @Deprecated public double time;
  /** device receiver timestamp in UTC (s) */
  @Deprecated public double timeReceived;
  /** timestamp in UTC according to an external source (s) */
  @Deprecated public double externalTime;
  /** hostname or IP address that time was polled from */
  @Deprecated public java.lang.CharSequence host;
  /** protocol for external time synchronization */
  @Deprecated public org.radarcns.application.ExternalTimeProtocol protocol;
  /** delay between sending and receiving a message from the host (s). The lower this delay, the more precise the external timestamp is expected to be. */
  @Deprecated public double delay;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ApplicationExternalTime() {}

  /**
   * All-args constructor.
   * @param time device timestamp in UTC (s)
   * @param timeReceived device receiver timestamp in UTC (s)
   * @param externalTime timestamp in UTC according to an external source (s)
   * @param host hostname or IP address that time was polled from
   * @param protocol protocol for external time synchronization
   * @param delay delay between sending and receiving a message from the host (s). The lower this delay, the more precise the external timestamp is expected to be.
   */
  public ApplicationExternalTime(java.lang.Double time, java.lang.Double timeReceived, java.lang.Double externalTime, java.lang.CharSequence host, org.radarcns.application.ExternalTimeProtocol protocol, java.lang.Double delay) {
    this.time = time;
    this.timeReceived = timeReceived;
    this.externalTime = externalTime;
    this.host = host;
    this.protocol = protocol;
    this.delay = delay;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return timeReceived;
    case 2: return externalTime;
    case 3: return host;
    case 4: return protocol;
    case 5: return delay;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.Double)value$; break;
    case 1: timeReceived = (java.lang.Double)value$; break;
    case 2: externalTime = (java.lang.Double)value$; break;
    case 3: host = (java.lang.CharSequence)value$; break;
    case 4: protocol = (org.radarcns.application.ExternalTimeProtocol)value$; break;
    case 5: delay = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return device timestamp in UTC (s)
   */
  public java.lang.Double getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * device timestamp in UTC (s)
   * @param value the value to set.
   */
  public void setTime(java.lang.Double value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'timeReceived' field.
   * @return device receiver timestamp in UTC (s)
   */
  public java.lang.Double getTimeReceived() {
    return timeReceived;
  }

  /**
   * Sets the value of the 'timeReceived' field.
   * device receiver timestamp in UTC (s)
   * @param value the value to set.
   */
  public void setTimeReceived(java.lang.Double value) {
    this.timeReceived = value;
  }

  /**
   * Gets the value of the 'externalTime' field.
   * @return timestamp in UTC according to an external source (s)
   */
  public java.lang.Double getExternalTime() {
    return externalTime;
  }

  /**
   * Sets the value of the 'externalTime' field.
   * timestamp in UTC according to an external source (s)
   * @param value the value to set.
   */
  public void setExternalTime(java.lang.Double value) {
    this.externalTime = value;
  }

  /**
   * Gets the value of the 'host' field.
   * @return hostname or IP address that time was polled from
   */
  public java.lang.CharSequence getHost() {
    return host;
  }

  /**
   * Sets the value of the 'host' field.
   * hostname or IP address that time was polled from
   * @param value the value to set.
   */
  public void setHost(java.lang.CharSequence value) {
    this.host = value;
  }

  /**
   * Gets the value of the 'protocol' field.
   * @return protocol for external time synchronization
   */
  public org.radarcns.application.ExternalTimeProtocol getProtocol() {
    return protocol;
  }

  /**
   * Sets the value of the 'protocol' field.
   * protocol for external time synchronization
   * @param value the value to set.
   */
  public void setProtocol(org.radarcns.application.ExternalTimeProtocol value) {
    this.protocol = value;
  }

  /**
   * Gets the value of the 'delay' field.
   * @return delay between sending and receiving a message from the host (s). The lower this delay, the more precise the external timestamp is expected to be.
   */
  public java.lang.Double getDelay() {
    return delay;
  }

  /**
   * Sets the value of the 'delay' field.
   * delay between sending and receiving a message from the host (s). The lower this delay, the more precise the external timestamp is expected to be.
   * @param value the value to set.
   */
  public void setDelay(java.lang.Double value) {
    this.delay = value;
  }

  /**
   * Creates a new ApplicationExternalTime RecordBuilder.
   * @return A new ApplicationExternalTime RecordBuilder
   */
  public static org.radarcns.application.ApplicationExternalTime.Builder newBuilder() {
    return new org.radarcns.application.ApplicationExternalTime.Builder();
  }

  /**
   * Creates a new ApplicationExternalTime RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ApplicationExternalTime RecordBuilder
   */
  public static org.radarcns.application.ApplicationExternalTime.Builder newBuilder(org.radarcns.application.ApplicationExternalTime.Builder other) {
    return new org.radarcns.application.ApplicationExternalTime.Builder(other);
  }

  /**
   * Creates a new ApplicationExternalTime RecordBuilder by copying an existing ApplicationExternalTime instance.
   * @param other The existing instance to copy.
   * @return A new ApplicationExternalTime RecordBuilder
   */
  public static org.radarcns.application.ApplicationExternalTime.Builder newBuilder(org.radarcns.application.ApplicationExternalTime other) {
    return new org.radarcns.application.ApplicationExternalTime.Builder(other);
  }

  /**
   * RecordBuilder for ApplicationExternalTime instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ApplicationExternalTime>
    implements org.apache.avro.data.RecordBuilder<ApplicationExternalTime> {

    /** device timestamp in UTC (s) */
    private double time;
    /** device receiver timestamp in UTC (s) */
    private double timeReceived;
    /** timestamp in UTC according to an external source (s) */
    private double externalTime;
    /** hostname or IP address that time was polled from */
    private java.lang.CharSequence host;
    /** protocol for external time synchronization */
    private org.radarcns.application.ExternalTimeProtocol protocol;
    /** delay between sending and receiving a message from the host (s). The lower this delay, the more precise the external timestamp is expected to be. */
    private double delay;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarcns.application.ApplicationExternalTime.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.externalTime)) {
        this.externalTime = data().deepCopy(fields()[2].schema(), other.externalTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.host)) {
        this.host = data().deepCopy(fields()[3].schema(), other.host);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.protocol)) {
        this.protocol = data().deepCopy(fields()[4].schema(), other.protocol);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.delay)) {
        this.delay = data().deepCopy(fields()[5].schema(), other.delay);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ApplicationExternalTime instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarcns.application.ApplicationExternalTime other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.externalTime)) {
        this.externalTime = data().deepCopy(fields()[2].schema(), other.externalTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.host)) {
        this.host = data().deepCopy(fields()[3].schema(), other.host);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.protocol)) {
        this.protocol = data().deepCopy(fields()[4].schema(), other.protocol);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.delay)) {
        this.delay = data().deepCopy(fields()[5].schema(), other.delay);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * device timestamp in UTC (s)
      * @return The value.
      */
    public java.lang.Double getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * device timestamp in UTC (s)
      * @param value The value of 'time'.
      * @return This builder.
      */
    public org.radarcns.application.ApplicationExternalTime.Builder setTime(double value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * device timestamp in UTC (s)
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * device timestamp in UTC (s)
      * @return This builder.
      */
    public org.radarcns.application.ApplicationExternalTime.Builder clearTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeReceived' field.
      * device receiver timestamp in UTC (s)
      * @return The value.
      */
    public java.lang.Double getTimeReceived() {
      return timeReceived;
    }

    /**
      * Sets the value of the 'timeReceived' field.
      * device receiver timestamp in UTC (s)
      * @param value The value of 'timeReceived'.
      * @return This builder.
      */
    public org.radarcns.application.ApplicationExternalTime.Builder setTimeReceived(double value) {
      validate(fields()[1], value);
      this.timeReceived = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timeReceived' field has been set.
      * device receiver timestamp in UTC (s)
      * @return True if the 'timeReceived' field has been set, false otherwise.
      */
    public boolean hasTimeReceived() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timeReceived' field.
      * device receiver timestamp in UTC (s)
      * @return This builder.
      */
    public org.radarcns.application.ApplicationExternalTime.Builder clearTimeReceived() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalTime' field.
      * timestamp in UTC according to an external source (s)
      * @return The value.
      */
    public java.lang.Double getExternalTime() {
      return externalTime;
    }

    /**
      * Sets the value of the 'externalTime' field.
      * timestamp in UTC according to an external source (s)
      * @param value The value of 'externalTime'.
      * @return This builder.
      */
    public org.radarcns.application.ApplicationExternalTime.Builder setExternalTime(double value) {
      validate(fields()[2], value);
      this.externalTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'externalTime' field has been set.
      * timestamp in UTC according to an external source (s)
      * @return True if the 'externalTime' field has been set, false otherwise.
      */
    public boolean hasExternalTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'externalTime' field.
      * timestamp in UTC according to an external source (s)
      * @return This builder.
      */
    public org.radarcns.application.ApplicationExternalTime.Builder clearExternalTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'host' field.
      * hostname or IP address that time was polled from
      * @return The value.
      */
    public java.lang.CharSequence getHost() {
      return host;
    }

    /**
      * Sets the value of the 'host' field.
      * hostname or IP address that time was polled from
      * @param value The value of 'host'.
      * @return This builder.
      */
    public org.radarcns.application.ApplicationExternalTime.Builder setHost(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.host = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'host' field has been set.
      * hostname or IP address that time was polled from
      * @return True if the 'host' field has been set, false otherwise.
      */
    public boolean hasHost() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'host' field.
      * hostname or IP address that time was polled from
      * @return This builder.
      */
    public org.radarcns.application.ApplicationExternalTime.Builder clearHost() {
      host = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'protocol' field.
      * protocol for external time synchronization
      * @return The value.
      */
    public org.radarcns.application.ExternalTimeProtocol getProtocol() {
      return protocol;
    }

    /**
      * Sets the value of the 'protocol' field.
      * protocol for external time synchronization
      * @param value The value of 'protocol'.
      * @return This builder.
      */
    public org.radarcns.application.ApplicationExternalTime.Builder setProtocol(org.radarcns.application.ExternalTimeProtocol value) {
      validate(fields()[4], value);
      this.protocol = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'protocol' field has been set.
      * protocol for external time synchronization
      * @return True if the 'protocol' field has been set, false otherwise.
      */
    public boolean hasProtocol() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'protocol' field.
      * protocol for external time synchronization
      * @return This builder.
      */
    public org.radarcns.application.ApplicationExternalTime.Builder clearProtocol() {
      protocol = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'delay' field.
      * delay between sending and receiving a message from the host (s). The lower this delay, the more precise the external timestamp is expected to be.
      * @return The value.
      */
    public java.lang.Double getDelay() {
      return delay;
    }

    /**
      * Sets the value of the 'delay' field.
      * delay between sending and receiving a message from the host (s). The lower this delay, the more precise the external timestamp is expected to be.
      * @param value The value of 'delay'.
      * @return This builder.
      */
    public org.radarcns.application.ApplicationExternalTime.Builder setDelay(double value) {
      validate(fields()[5], value);
      this.delay = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'delay' field has been set.
      * delay between sending and receiving a message from the host (s). The lower this delay, the more precise the external timestamp is expected to be.
      * @return True if the 'delay' field has been set, false otherwise.
      */
    public boolean hasDelay() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'delay' field.
      * delay between sending and receiving a message from the host (s). The lower this delay, the more precise the external timestamp is expected to be.
      * @return This builder.
      */
    public org.radarcns.application.ApplicationExternalTime.Builder clearDelay() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public ApplicationExternalTime build() {
      try {
        ApplicationExternalTime record = new ApplicationExternalTime();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.Double) defaultValue(fields()[0]);
        record.timeReceived = fieldSetFlags()[1] ? this.timeReceived : (java.lang.Double) defaultValue(fields()[1]);
        record.externalTime = fieldSetFlags()[2] ? this.externalTime : (java.lang.Double) defaultValue(fields()[2]);
        record.host = fieldSetFlags()[3] ? this.host : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.protocol = fieldSetFlags()[4] ? this.protocol : (org.radarcns.application.ExternalTimeProtocol) defaultValue(fields()[4]);
        record.delay = fieldSetFlags()[5] ? this.delay : (java.lang.Double) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
